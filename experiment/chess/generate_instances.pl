
set_rand:-
    sleep(1),
    get_time(X),
    U is floor(X),
    set_random(seed(U)).

%% positive_examples(+M,-Pos)
%% generate a set Pos of M positive examples
positive_examples(M,Pos) :-
    set_rand,
    findall(Ex,(between(1,M,_),positive_example(Ex)),Pos).

%% negative_examples(+M,-Neg)
%% generate a set Neg of M negative examples
negative_examples(M,Neg) :-
    findall(Ex,(between(1,M,_),negative_example(Ex)),Neg).

%% positive_examples(-B)
%% generate one positive example B
%% positive examples are generated by placing the white king and white rook at distance 1 and adding the black king in a different position
positive_example(rook_protected([C1,C2,C3])):-
    repeat,
    generate_rook_protected(C1,C2),
    generate_piece(b,k,C3),
    not(same_pos(C2,C3)),
    not(same_pos(C3,C1)),!.

%% negative_examples(-B)
%% generate one negative example B
%% negative examples are generated by altering a positive example, which is by changing one attribute (position, color or type) of a piece such that the resulting board state does not verify the target definition of rook protected
negative_example(rook_protected([C1,C2,C3])):-
    repeat,
    positive_example(S1),
    alter_rook_protected(S1,rook_protected([C1,C2,C3])),
    not(same_pos(C1,C2)),
    not(same_pos(C2,C3)),
    not(same_pos(C3,C1)),
    not(rook_protected([C1,C2,C3])),!.

%% selects either the white king or the white rook (choice made at random with probability 0.5 for each) and changes one of its attribute (position, color or type)
alter_rook_protected(rook_protected([C1,C21,C31]),rook_protected([C1,C22,C32])):-
    ((maybe) -> (alter_cell(C21,C22), C32 = C31);
    (alter_cell(C31,C22), C22 = C21)).

%% changes the attribute of one cell, one atribute is changed and this attribute is chosen at random
alter_cell(C1,C2):-
    random_member(I,[x,y,color,type]),
    alter(I,C1,C2).

alter(x,c(R1,F,C,T),c(R2,F,C,T)) :- alter_pos(R1,R2).
alter(y,c(R,F1,C,T),c(R,F2,C,T)) :- alter_pos(F1,F2).
alter(color,c(R,F,C1,T),c(R,F,C2,T)) :- alter_color(C1,C2).
alter(type,c(R,F,C,T1),c(R,F,C,T2)) :- alter_type(T1,T2).

%% alter_pos(+P1,-P2)
%% changes P1 to a neighboring position P2 by adding or substracting 1 to P1
alter_pos(1,2) :- !.
alter_pos(8,7) :- !.
alter_pos(X1,X2):- ((maybe -> plus1(X1,X2)); minus1(X1,X2)).

%% switches the color
alter_color(w,b).
alter_color(b,w).

%% switches the piece type
alter_type(r,k).
alter_type(k,r).

%% generate_piece(+C,+T,-Cell)
%% assign a cell Cell with random position to the piece with color C and type T
generate_piece(Color,Type,c(Rank,File,Color,Type)):-
    board_size(S),
    random_between(1,S,Rank),
    random_between(1,S,File).

%% generate_rook_protected(+C1,+C2)
%% generate two cells C1 and C2 for the white rook and king such that the rook and the king are at distance 1 (the king then protects the rook)
generate_rook_protected(C1,c(R1,F1,w,k)):-
    generate_piece(w,r,C1),
    around(C1,Cs),
    random_member(C,Cs),
    rank(C,R1),
    file(C,F1).

%% around(+c(R,F,_,_),-Cs)
%% finds all neighboring cell positions Cs around a given cell c(R,F,_,_)
around(c(R,F,_,_),Cs):-
    board_size(S),
    findall(c(R1,F1,_,_),((plus1(R,R1);minus1(R,R1);eq(R,R1)),(plus1(F,F1);minus1(F,F1);eq(F,F1)),between(1,S,R1),between(1,S,F1),\+((R1,F1)=(R,F))),Cs).

eq(X,X).

%% -------------
%% Target Theory
%% -------------

rook_protected(S) :- piece_white_king(S,W), rook_protected_1(S,W).
rook_protected_1(S,W) :- piece_rook(S,R), distance1(R,W).
piece_white_king(S,B) :- piece(S,B), white_king(B).
white_king(B) :- white(B), king(B).
piece_rook(S,R) :- piece(S,R), rook(R).
